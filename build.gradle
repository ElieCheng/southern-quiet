buildscript {
    def path = 'buildscript.gradle'

    if (this.name != 'southern-quiet') {
        path = "deps/southern-quiet/buildscript.gradle"
    }

    buildscript { scriptHandler ->
        apply from: path, to: scriptHandler
    }
}

apply plugin: 'idea'
apply plugin: 'eclipse'

idea {
    project {
        jdkName = '1.8'
        languageLevel = '1.8'
    }
}

subprojects {
    group = 'me.insidezhou.southernquiet'
    version = '3.0.1'

    ext {
        instepVersion = '1.0.1'
    }

    apply plugin: 'idea'
    apply plugin: 'eclipse'

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'

    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    repositories {
        mavenLocal()
        maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "https://maven.aliyun.com/repository/spring" }
        maven { url "https://maven.aliyun.com/repository/spring-plugin" }
    }

    dependencies {
        compileClasspath "org.springframework.boot:spring-boot-configuration-processor"

        testImplementation "org.springframework.boot:spring-boot-starter-test"
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'minutes'
    }

    compileJava.dependsOn(processResources)

    tasks.withType(JavaCompile) {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8

        options.encoding = "UTF-8"
    }

    jar {
        enabled = true
        baseName = "$rootProject.name-$project.name"

        manifest {
            attributes 'Implementation-Version': version
        }
    }

    javadoc {
        options.encoding = 'UTF-8'
        failOnError = false
    }

    bootJar {
        classifier = 'boot'

        manifest {
            attributes 'Implementation-Version': version
        }
    }

    task sourceJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task docJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    publishing {
        publications {
            full(MavenPublication) {
                artifactId jar.baseName

                from components.java

                artifact sourceJar
                artifact docJar

                pom {
                    name = 'SouthernQuiet'
                    description = '这是一个基于Spring Boot，为了复用一些公共代码而存在的库。'
                    url = 'https://github.com/InsideZhou/southern-quiet'

                    scm {
                        connection = 'scm:git:git://github.com/InsideZhou/southern-quiet.git'
                        developerConnection = 'scm:git:ssh://github.com/InsideZhou/southern-quiet.git'
                        url = 'https://github.com/InsideZhou/southern-quiet'

                    }

                    licenses {
                        license {
                            name = 'The 3-Clause BSD License'
                            url = 'https://opensource.org/licenses/BSD-3-Clause'
                        }
                    }

                    developers {
                        developer {
                            name = 'Inside Zhou'
                            email = 'inside@insidezhou.me'
                        }
                    }
                }
            }

            simple(MavenPublication) {
                artifactId jar.baseName

                from components.java

                artifact sourceJar
            }
        }

        repositories {
            maven {
                def isSnapshot = version.endsWith("SNAPSHOT")
                def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'

                url isSnapshot ? snapshotsRepoUrl : releasesRepoUrl
                name 'sonatype'
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        }
    }

    signing {
        sign publishing.publications.full
    }
}
