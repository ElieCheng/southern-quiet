buildscript {
    def path = 'buildscript.gradle'

    if (this.name != 'southern-quiet') {
        path = "deps/southern-quiet/buildscript.gradle"
    }

    buildscript { scriptHandler ->
        apply from: path, to: scriptHandler
    }
}

apply plugin: 'idea'
apply plugin: 'eclipse'

idea {
    project {
        jdkName = '1.8'
        languageLevel = '1.8'
    }
}

subprojects {
    group = 'com.ai.southernquiet'
    version = '2.0.0-beta9-SNAPSHOT'

    ext {
        instepVersion = '1.0.0'
    }

    apply plugin: 'idea'
    apply plugin: 'eclipse'

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'

    apply plugin: 'maven-publish'

    repositories {
        mavenLocal()
        maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "https://maven.aliyun.com/repository/spring" }
        maven { url "https://maven.aliyun.com/repository/spring-plugin" }
    }

    dependencies {
        compileClasspath "org.springframework.boot:spring-boot-configuration-processor"

        testImplementation "org.springframework.boot:spring-boot-starter-test"
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'minutes'
    }

    compileJava.dependsOn(processResources)

    tasks.withType(JavaCompile) {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8

        options.encoding = "UTF-8"
    }

    jar {
        enabled = true
        baseName = "$rootProject.name-$project.name"

        manifest {
            attributes 'Implementation-Version': version
        }
    }

    bootJar {
        classifier = 'boot'

        manifest {
            attributes 'Implementation-Version': version
        }
    }

    task sourceJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    publishing {
        publications {
            all(MavenPublication) {
                artifactId jar.baseName

                from components.java

                artifact sourceJar
            }
        }

        repositories {
            maven {
                def isSnapshot = version.endsWith("SNAPSHOT")
                def releasesRepoUrl = project.hasProperty('cnbssReleaseUrl') ? cnbssReleaseUrl : ''
                def snapshotsRepoUrl = project.hasProperty('cnbssSnapshotUrl') ? cnbssSnapshotUrl : ''

                url isSnapshot ? snapshotsRepoUrl : releasesRepoUrl

                name 'cnbss'

                def cnbssUsername = isSnapshot ? (project.hasProperty('cnbssSnapshotUsername') ? cnbssSnapshotUsername : '') : (project.hasProperty('cnbssReleaseUsername') ? cnbssReleaseUsername : '')
                def cnbssPassword = isSnapshot ? (project.hasProperty('cnbssSnapshotPassword') ? cnbssSnapshotPassword : '') : (project.hasProperty('cnbssReleasePassword') ? cnbssReleasePassword : '')

                credentials {
                    username = cnbssUsername
                    password = cnbssPassword
                }
            }
        }
    }
}
