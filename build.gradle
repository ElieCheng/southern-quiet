buildscript {
    def path = 'buildscript.gradle'

    if (this.name != 'southern-quiet') {
        path = "deps/southern-quiet/buildscript.gradle"
    }

    buildscript { scriptHandler ->
        apply from: path, to: scriptHandler
    }
}

apply plugin: 'idea'
apply plugin: 'eclipse'

idea {
    project {
        jdkName = '1.8'
        languageLevel = '1.8'
    }
}

subprojects {
    group = 'com.ai.southernquiet'
    version = '0.1.0-SNAPSHOT'

    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'

    apply plugin: 'maven-publish'

    repositories {
        mavenLocal()
        jcenter()
        maven { url "http://repo.spring.io/milestone" }
    }

    dependencies {
        implementation('de.ruedigermoeller:fst:2.50') {
            //为什么可以exclude这些需要看fst的pom注释
            exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
            exclude group: 'org.javassist', module: 'javassist'
            exclude group: 'org.objenesis', module: 'objenesis'
        }

        optional "org.springframework.boot:spring-boot-configuration-processor"
        optional "org.springframework.boot:spring-boot-devtools"

        testImplementation "org.springframework.boot:spring-boot-starter-test"
    }

    compileJava.dependsOn(processResources)

    tasks.withType(JavaCompile) {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8

        options.encoding = "UTF-8"
    }

    jar {
        enabled = true
    }

    bootJar {
        classifier = 'boot'
    }

    task sourceJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task publishToCnbss {
        group "publishing"
        description "发布到cnbss仓库"
        dependsOn tasks.withType(PublishToMavenRepository).matching {
            it.repository == publishing.repositories.cnbss
        }
    }

    publishing {
        publications {
            all(MavenPublication) {
                from components.java

                artifact sourceJar
            }
        }

        repositories {
            maven {
                def releasesRepoUrl = project.hasProperty('cnbssReleaseUrl') ? cnbssReleaseUrl : ''
                def snapshotsRepoUrl = project.hasProperty('cnbssSnapshotUrl') ? cnbssSnapshotUrl : ''
                url version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl

                name 'cnbss'

                credentials {
                    username = project.hasProperty('cnbssUsername') ? cnbssUsername : ''
                    password = project.hasProperty('cnbssPassword') ? cnbssPassword : ''
                }
            }
        }
    }
}
